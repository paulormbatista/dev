/**
 * @module teams-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { TurnContext, Storage } from 'botbuilder';
import { TurnState, TurnStateEntry, TurnStateManager } from './TurnState';
/**
 * Default conversation state
 * @remarks
 * Inherit a new interface from this base interface to strongly type the applications conversation
 * state.
 */
export interface DefaultConversationState {
}
/**
 * Default user state
 * @remarks
 * Inherit a new interface from this base interface to strongly type the applications user
 * state.
 */
export interface DefaultUserState {
}
/**
 * Default temp state
 * @remarks
 * Inherit a new interface from this base interface to strongly type the applications temp
 * state.
 */
export interface DefaultTempState {
    /**
     * Token returned if the Application was configured with authentication support.
     */
    authToken?: string;
    /**
     * Input passed to an AI prompt
     */
    input: string;
    /**
     * Formatted conversation history for embedding in an AI prompt
     */
    history: string;
    /**
     * Output returned from an AI prompt or function
     */
    output: string;
}
/**
 * Defines the default state scopes persisted by the `DefaultTurnStateManager`.
 * @template TConversationState Optional. Type of the conversation state object being persisted.
 * @template TUserState Optional. Type of the user state object being persisted.
 * @template TTempState Optional. Type of the temp state object being persisted.
 */
export interface DefaultTurnState<TConversationState extends DefaultConversationState = DefaultConversationState, TUserState extends DefaultUserState = DefaultUserState, TTempState extends DefaultTempState = DefaultTempState> extends TurnState {
    conversation: TurnStateEntry<TConversationState>;
    user: TurnStateEntry<TUserState>;
    temp: TurnStateEntry<TTempState>;
}
/**
 * Default turn state manager implementation.
 * @template TConversationState Optional. Type of the conversation state object being persisted.
 * @template TUserState Optional. Type of the user state object being persisted.
 * @template TTempState Optional. Type of the temp state object being persisted.
 */
export declare class DefaultTurnStateManager<TConversationState extends DefaultConversationState = DefaultConversationState, TUserState extends DefaultUserState = DefaultUserState, TTempState extends DefaultTempState = DefaultTempState> implements TurnStateManager<DefaultTurnState<TConversationState, TUserState, TTempState>> {
    /**
     * Loads all of the state scopes for the current turn.
     * @param storage Storage provider to load state scopes from.
     * @param context Context for the current turn of conversation with the user.
     * @returns The loaded state scopes.
     */
    loadState(storage: Storage, context: TurnContext): Promise<DefaultTurnState<TConversationState, TUserState, TTempState>>;
    /**
     * Saves all of the state scopes for the current turn.
     * @param storage Storage provider to save state scopes to.
     * @param context Context for the current turn of conversation with the user.
     * @param state State scopes to save.
     */
    saveState(storage: Storage, context: TurnContext, state: DefaultTurnState<TConversationState, TUserState, TTempState>): Promise<void>;
}
//# sourceMappingURL=DefaultTurnStateManager.d.ts.map