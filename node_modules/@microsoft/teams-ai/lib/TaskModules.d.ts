/**
 * @module teams-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { TurnContext, TaskModuleTaskInfo } from 'botbuilder';
import { Application, RouteSelector } from './Application';
import { TurnState } from './TurnState';
/**
 * Options for TaskModules class.
 */
export interface TaskModulesOptions {
    /**
     * Data field to use to identify the verb of the handler to trigger.
     * @remarks
     * When a task module is triggered, the field name specified here will be used to determine
     * the name of the verb for the handler to route the request to.
     *
     * Defaults to a value of 'verb'.
     */
    taskDataFilter?: string;
}
/**
 * TaskModules class to enable fluent style registration of handlers related to Task Modules.
 * @template TState Type of the turn state object being persisted.
 */
export declare class TaskModules<TState extends TurnState> {
    private readonly _app;
    /**
     * Creates a new instance of the TaskModules class.
     * @param app Top level application class to register handlers with.
     */
    constructor(app: Application<TState>);
    /**
     * Registers a handler to process the initial fetch of the task module.
     * @remarks
     * Handlers should respond with either an initial TaskInfo object or a string containing
     * a message to display to the user.
     * @template TData Optional. Type of the data object being passed to the handler.
     * @param verb Name of the verb(s) to register the handler for.
     * @param handler Function to call when the handler is triggered.
     * @param handler.context Context for the current turn of conversation with the user.
     * @param handler.state Current state of the turn.
     * @param handler.data Data object passed to the handler.
     * @returns The application for chaining purposes.
     */
    fetch<TData extends Record<string, any> = Record<string, any>>(verb: string | RegExp | RouteSelector | (string | RegExp | RouteSelector)[], handler: (context: TurnContext, state: TState, data: TData) => Promise<TaskModuleTaskInfo | string>): Application<TState>;
    /**
     * Registers a handler to process the submission of a task module.
     * @remarks
     * Handlers should respond with another TaskInfo object, message string, or `null` to indicate
     * the task is completed.
     * @template TData Optional. Type of the data object being passed to the handler.
     * @param verb Name of the verb(s) to register the handler for.
     * @param handler Function to call when the handler is triggered.
     * @param handler.context Context for the current turn of conversation with the user.
     * @param handler.state Current state of the turn.
     * @param handler.data Data object passed to the handler.
     * @returns The application for chaining purposes.
     */
    submit<TData extends Record<string, any> = Record<string, any>>(verb: string | RegExp | RouteSelector | (string | RegExp | RouteSelector)[], handler: (context: TurnContext, state: TState, data: TData) => Promise<TaskModuleTaskInfo | string | null | undefined>): Application<TState>;
}
//# sourceMappingURL=TaskModules.d.ts.map