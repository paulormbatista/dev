/**
 * @module teams-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { TurnContext, Storage } from 'botbuilder';
/**
 * Base interface defining a collection of turn state scopes.
 */
export interface TurnState {
    /**
     * A named state scope.
     */
    [key: string]: TurnStateEntry;
}
/**
 * Interface implemented by classes responsible for loading and saving an applications turn state.
 * @template TState Type of the state object being persisted.
 */
export interface TurnStateManager<TState extends TurnState> {
    /**
     * Loads all of the state scopes for the current turn.
     * @param storage Storage provider to load state scopes from.
     * @param context Context for the current turn of conversation with the user.
     * @returns The loaded state scopes.
     */
    loadState(storage: Storage | undefined, context: TurnContext): Promise<TState>;
    /**
     * Saves all of the state scopes for the current turn.
     * @param storage Storage provider to save state scopes to.
     * @param context Context for the current turn of conversation with the user.
     * @param state State scopes to save.
     */
    saveState(storage: Storage | undefined, context: TurnContext, state: TState): Promise<void>;
}
/**
 * Accessor class for managing an individual state scope.
 * @template TValue Optional. Strongly typed value of the state scope.
 */
export declare class TurnStateEntry<TValue extends Record<string, any> = Record<string, any>> {
    private _value;
    private _storageKey?;
    private _deleted;
    private _hash;
    /**
     * Creates a new instance of the `TurnStateEntry` class.
     * @param value Optional. Value to initialize the state scope with. The default is an {} object.
     * @param storageKey Optional. Storage key to use when persisting the state scope.
     */
    constructor(value?: TValue, storageKey?: string);
    /**
     * Gets a value indicating whether the state scope has changed since it was last loaded.
     */
    get hasChanged(): boolean;
    /**
     * Gets a value indicating whether the state scope has been deleted.
     */
    get isDeleted(): boolean;
    /**
     * Gets the value of the state scope.
     */
    get value(): TValue;
    /**
     * Gets the storage key used to persist the state scope.
     */
    get storageKey(): string | undefined;
    /**
     * Clears the state scope.
     */
    delete(): void;
    /**
     * Replaces the state scope with a new value.
     * @param value New value to replace the state scope with.
     */
    replace(value?: TValue): void;
}
//# sourceMappingURL=TurnState.d.ts.map