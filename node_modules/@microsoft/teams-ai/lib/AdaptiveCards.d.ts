/**
 * @module teams-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { TurnContext } from 'botbuilder';
import { Application, RouteSelector, Query } from './Application';
import { TurnState } from './TurnState';
/**
 * Strongly typed Adaptive Card.
 * @remarks
 * see https://adaptivecards.io/explorer/ for schema details.
 */
export interface AdaptiveCard {
    /**
     * Required type field.
     */
    type: 'AdaptiveCard';
    /**
     * Additional card fields.
     */
    [key: string]: any;
}
/**
 * Options for AdaptiveCards class.
 */
export interface AdaptiveCardsOptions {
    /**
     * Data field used to identify the Action.Submit handler to trigger.
     * @remarks
     * When an Action.Submit is triggered, the field name specified here will be used to determine
     * the handler to route the request to.
     *
     * Defaults to a value of 'verb'.
     */
    actionSubmitFilter?: string;
}
/**
 * Parameters passed to AdaptiveCards.search() handler.
 */
export interface AdaptiveCardsSearchParams {
    /**
     * The query text.
     */
    queryText: string;
    /**
     * The dataset to search.
     */
    dataset: string;
}
/**
 * Individual result returned from AdaptiveCards.search() handler.
 */
export interface AdaptiveCardSearchResult {
    /**
     * The title of the result.
     */
    title: string;
    /**
     * The subtitle of the result.
     */
    value: string;
}
/**
 * AdaptiveCards class to enable fluent style registration of handlers related to Adaptive Cards.
 * @template TState Type of the turn state object being persisted.
 */
export declare class AdaptiveCards<TState extends TurnState> {
    private readonly _app;
    /**
     * Creates a new instance of the AdaptiveCards class.
     * @param app Top level application class to register handlers with.
     */
    constructor(app: Application<TState>);
    /**
     * Adds a route to the application for handling Adaptive Card Action.Execute events.
     * @template TData Optional. Type of the data associated with the action.
     * @param verb The named action(s) to be handled.
     * @param handler The code to execute when the action is triggered.
     * @param handler.context The current turn context.
     * @param handler.state The current turn state.
     * @param handler.data The data associated with the action.
     * @returns The application for chaining purposes.
     */
    actionExecute<TData = Record<string, any>>(verb: string | RegExp | RouteSelector | (string | RegExp | RouteSelector)[], handler: (context: TurnContext, state: TState, data: TData) => Promise<AdaptiveCard | string>): Application<TState>;
    /**
     * Adds a route to the application for handling Adaptive Card Action.Submit events.
     * @remarks
     * The route will be added for the specified verb(s) and will be filtered using the
     * `actionSubmitFilter` option. The default filter is to use the `verb` field.
     *
     * For outgoing AdaptiveCards you will need to include the verb's name in the cards Action.Submit.
     * For example:
     *
     * ```JSON
     * {
     *   "type": "Action.Submit",
     *   "title": "OK",
     *   "data": {
     *      "verb": "ok"
     *   }
     * }
     * ```
     * @template TData Optional. Type of the data associated with the action.
     * @param verb The named action(s) to be handled.
     * @param handler The code to execute when the action is triggered.
     * @param handler.context The current turn context.
     * @param handler.state The current turn state.
     * @param handler.data The data associated with the action.
     * @returns The application for chaining purposes.
     */
    actionSubmit<TData = Record<string, any>>(verb: string | RegExp | RouteSelector | (string | RegExp | RouteSelector)[], handler: (context: TurnContext, state: TState, data: TData) => Promise<void>): Application<TState>;
    search(dataset: string | RegExp | RouteSelector | (string | RegExp | RouteSelector)[], handler: (context: TurnContext, state: TState, query: Query<AdaptiveCardsSearchParams>) => Promise<AdaptiveCardSearchResult[]>): Application<TState>;
}
//# sourceMappingURL=AdaptiveCards.d.ts.map