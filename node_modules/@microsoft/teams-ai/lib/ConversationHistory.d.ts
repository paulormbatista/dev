/**
 * @module teams-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { TurnState } from './TurnState';
/**
 * Utility class used to manage the persistance of conversation history.
 */
export declare class ConversationHistory {
    /**
     * Name of the conversation state property used to hold the list of entires.
     */
    static readonly StatePropertyName = "__history__";
    /**
     * Adds a new line of text to conversation history
     * @param state Applications turn state.
     * @param line Line of text to add to history.
     * @param maxLines Optional. Maximum number of lines to store. Defaults to 10.
     */
    static addLine(state: TurnState, line: string, maxLines?: number): void;
    /**
     * Appends additional text to the last line of conversation history.
     * @param state Applications turn state.
     * @param text Text to add to the last line.
     */
    static appendToLastLine(state: TurnState, text: string): void;
    /**
     * Clears all conversation history for the current conversation.
     * @param state Applications turn state.
     */
    static clear(state: TurnState): void;
    /**
     * Checks to see if one or more lines of history has persisted.
     * @param state Applications turn state.
     * @returns True if there are 1 or more lines of history.
     */
    static hasMoreLines(state: TurnState): boolean;
    /**
     * Returns the last line of history.
     * @param state Applications turn state.
     * @returns The last line of history or an empty string.
     */
    static getLastLine(state: TurnState): string;
    /**
     * Searches the history to find the last SAY response from the assistant.
     * @param state Applications turn state.
     * @returns Last thing said by the assistant. Defaults to an empty string.
     */
    static getLastSay(state: TurnState): string;
    /**
     * Removes the last line from the conversation history.
     * @param state Applications turn state.
     * @returns The removed line or undefined.
     */
    static removeLastLine(state: TurnState): string | undefined;
    /**
     * Replaces the last line of history with a new line.
     * @param state Applications turn state.
     * @param line New line of history.
     */
    static replaceLastLine(state: TurnState, line: string): void;
    /**
     * Replaces the last SAY with a new response.
     * @param state Applications turn state.
     * @param newResponse New response from the assistant.
     * @param assistantPrefix Prefix for when a new line needs to be inserted. Defaults to 'Assistant:'.
     */
    static replaceLastSay(state: TurnState, newResponse: string, assistantPrefix?: string): void;
    /**
     * Returns the current conversation history as a string of text.
     * @remarks
     * The length of the returned text is gated by `maxCharacterLength` and only whole lines of
     * history entries will be returned. That means that if the length of the most recent history
     * entry is greater then `maxCharacterLength`, no text will be returned.
     * @param state Application's turn state.
     * @param maxTokens Optional. Maximum length of the text returned. Defaults to 1000 tokens.
     * @param lineSeparator Optional. Separator used between lines. Defaults to '\n'.
     * @returns The most recent lines of conversation history as a text string.
     */
    static toString(state: TurnState, maxTokens?: number, lineSeparator?: string): string;
    /**
     * Returns the current conversation history as an array of lines.
     * @param state The Application's turn state.
     * @param maxTokens Optional. Maximum length of the text to include. Defaults to 1000 tokens.
     * @returns The most recent lines of conversation history as an array.
     */
    static toArray(state: TurnState, maxTokens?: number): string[];
}
//# sourceMappingURL=ConversationHistory.d.ts.map