"use strict";
/**
 * @module teams-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurnStateEntry = void 0;
/**
 * Accessor class for managing an individual state scope.
 * @template TValue Optional. Strongly typed value of the state scope.
 */
class TurnStateEntry {
    /**
     * Creates a new instance of the `TurnStateEntry` class.
     * @param value Optional. Value to initialize the state scope with. The default is an {} object.
     * @param storageKey Optional. Storage key to use when persisting the state scope.
     */
    constructor(value, storageKey) {
        this._deleted = false;
        this._value = value || {};
        this._storageKey = storageKey;
        this._hash = JSON.stringify(this._value);
    }
    /**
     * Gets a value indicating whether the state scope has changed since it was last loaded.
     */
    get hasChanged() {
        return JSON.stringify(this._value) != this._hash;
    }
    /**
     * Gets a value indicating whether the state scope has been deleted.
     */
    get isDeleted() {
        return this._deleted;
    }
    /**
     * Gets the value of the state scope.
     */
    get value() {
        if (this.isDeleted) {
            // Switch to a replace scenario
            this._value = {};
            this._deleted = false;
        }
        return this._value;
    }
    /**
     * Gets the storage key used to persist the state scope.
     */
    get storageKey() {
        return this._storageKey;
    }
    /**
     * Clears the state scope.
     */
    delete() {
        this._deleted = true;
    }
    /**
     * Replaces the state scope with a new value.
     * @param value New value to replace the state scope with.
     */
    replace(value) {
        this._value = value || {};
    }
}
exports.TurnStateEntry = TurnStateEntry;
//# sourceMappingURL=TurnState.js.map