/**
 * @module teams-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { TurnContext } from 'botbuilder';
import { DefaultTurnState } from './DefaultTurnStateManager';
import { PromptManager, PromptTemplate } from './Prompts';
import { TurnState } from './TurnState';
/**
 * Options used to configure the default prompt manager.
 */
export interface DefaultPromptManagerOptions {
    /**
     * Path to the filesystem folder containing all the applications prompts.
     */
    promptsFolder: string;
}
/**
 * A filesystem based prompt manager.
 * @remarks
 * The default prompt manager uses the file system to define prompts that are compatible with
 * Microsoft's Semantic Kernel SDK (see: https://github.com/microsoft/semantic-kernel)
 *
 * Each prompt is a separate folder under a root prompts folder. The folder should contain 2 files:
 *
 * - "config.json": contains the prompts configuration and is a serialized instance of `PromptTemplateConfig`.
 * - "skprompt.txt": contains the text of the prompt and supports Semantic Kernels prompt template syntax.
 *
 * Prompts can be loaded and used by name and new dynamically defined prompt templates can be
 * registered with the prompt manager.
 * @template TState Optional. Type of the applications turn state.
 */
export declare class DefaultPromptManager<TState extends TurnState = DefaultTurnState> implements PromptManager<TState> {
    private readonly _functions;
    private readonly _templates;
    private readonly _options;
    private readonly _templateEngine;
    constructor(options: DefaultPromptManagerOptions | string);
    /**
     * Adds a custom function <name> to the prompt manager.
     * @remarks
     * Functions can be used with a prompt template using a syntax of `{{name}}`. Function
     * arguments are not currently supported.
     * @param name The name of the function.
     * @param handler Promise to return on function name match.
     * @param allowOverrides Whether to allow overriding an existing function.
     * @returns The prompt manager for chaining.
     */
    addFunction(name: string, handler: (context: TurnContext, state: TState) => Promise<any>, allowOverrides?: boolean): this;
    /**
     * Adds a prompt template to the prompt manager.
     * @remarks
     * The template will be pre-parsed and cached for use when the template is rendered by name.
     * @param name Name of the prompt template.
     * @param template Prompt template to add.
     * @returns The prompt manager for chaining.
     */
    addPromptTemplate(name: string, template: PromptTemplate): this;
    /**
     * Invokes a function by name.
     * @param context Current application turn context.
     * @param state Current turn state.
     * @param name Name of the function to invoke.
     * @returns The result returned by the function for insertion into a prompt.
     */
    invokeFunction(context: TurnContext, state: TState, name: string): Promise<any>;
    /**
     * Loads a named prompt template from the filesystem.
     * @remarks
     * The template will be pre-parsed and cached for use when the template is rendered by name.
     * @param name Name of the template to load.
     * @returns The loaded and parsed prompt template.
     */
    loadPromptTemplate(name: string): Promise<PromptTemplate>;
    /**
     * Renders a prompt template by name.
     * @remarks
     * The prompt will be automatically loaded from disk if needed and cached for future use.
     * @param context Current application turn context.
     * @param state Current turn state.
     * @param nameOrTemplate Name of the prompt template to render or a prompt template to render.
     * @returns The rendered prompt template.
     */
    renderPrompt(context: TurnContext, state: TState, nameOrTemplate: string | PromptTemplate): Promise<PromptTemplate>;
}
//# sourceMappingURL=DefaultPromptManager.d.ts.map